/*BIZUS
O display do bloco estando inline, o navegador não vai aceitar
já no inline-block ele aceita*/

* {
  /*Este é o seletor universal ou seja tudo o que for atribuido aqui, fará efeito em todos os elementos do código*/

  margin: 0;
  padding: 0;
  /*É uma boa prática no CSS, atribuir margin-padding com o valor "0", para resetar as dimensões que o navegador atribui automaticamente*/

  box-sizing: border-box; /*ATENÇÃO!!! está tag que dizer que o box-sizing = tamanho da caixa será feito a partir da borda da caixa = border box - sendo assim outros atributos especificados para a caixa seram comprimidos dentro da caixa a partir da borda*/
}

body,
input,
select,
textarea {
  /*Especificar mais a fonte para as tags*/
  font-family: 'Poppins', sans-serif;
}

body {
  background: #e5e5e5;
}

body::before {
  /*Elemento no CSS que necessariamente possui um conteúdo = content, que dependendo da sudo class pode ser antes ou depois do conteúdo (before-after)*/
  content: '';
  position: absolute; /*Significa que o posicionamento fica sobreposto aos demais elementos*/
  /*display: block; Quer dizer que ele ocupa toda a linha e empurra os próximos elementos para baixo*/
  top: 0; /*Sub-atributos liberados por conta do atributo position*/
  left: 0;
  z-index: -1; /*Mexe com a 3º Dimesão do posicionamento do elemento, sendo que a posição inicial é 0, para colocar o posicionamento a baixo disto atribui-se -1, acima soma-se 1*/

  width: 100%;
  height: 368px;
  background: #121214;
}

.page {
  /*Aqui é a soma do header e form para estabelecer uma largura comúm*/
  margin: auto; /*Alinhando a caixa ao centro*/

  width: 736px;
}

header {
  width: 319px;

  margin-top: 74px;
}

header h1 {
  margin-bottom: 24px;

  /*width: 319px; aqui a largura é idêntica ao header, tirando a necessidade de especifica-la para o h1*/

  font-family: 'Archivo', sans-serif;
  font-weight: bold;

  font-size: 36px;
  line-height: 42px;

  color: #ffffff;
}

header p {
  width: 283px; /*diferente do código do explorer*/

  font-size: 16px;
  line-height: 26px;

  color: #42d3ff;
}

form {
  margin-top: 38px;

  background: #fafafc;

  border-radius: 8px 8px 0 0;

  min-height: 300px;

  padding: 64px; /*Preenchimento dentro do form em todas as direções é de 64px*/

  display: flex;
  flex-direction: column;
  gap: 48px;
}

fieldset {
  border: none;
}

.fieldset-wrapper {
  display: flex;
  flex-direction: column;
  gap: 24px; /*Estava escrito fildset no html e por isto não estava funcionando esta atribuição*/
}

fieldset legend {
  font-family: 'Archivo', sans-serif;
  font-weight: 600; /*O CSS não disponibiliza  a terminilogia de semi-bold então introduzimos o númeral*/
  font-size: 24px;
  line-height: 34px;

  width: 100%; /*A tag legend não está em display block ou seja não está ocupando a linha inteira, sendo assim é necessario a atribuir uma largura de 100% para que o border-bottom ocupe todo o espaço, como no figma*/

  border-bottom: 1px solid #e6e6f0;
  padding-bottom: 16px;
}

.input-wrapper {
  display: flex;
  flex-direction: column;
}

.input-wrapper label,
.checkbox-wrapper label {
  font-size: 14px;
  line-height: 24px;

  color: #4e4958;

  margin-bottom: 8px;
}

.input-wrapper label span {
  font-size: 12px;
  line-height: 20px;

  color: #c1bccc;

  margin-left: 12px; /*Espaço entre o label e o span*/
}

.input-wrapper label span:hover {
  color: #6c6a71;
}

.input-wrapper input,
.input-wrapper textarea,
.input-wrapper select {
  height: 56px;

  background: #fafafc;

  border: 1px solid #e6e6f0;
  border-radius: 8px;

  padding: 0 24px;

  font-size: 16px;
  line-height: 26px;

  color: #6c6a71;
}

.input-wrapper textarea {
  padding: 0;

  height: 168px;
}

.input-wrapper select {
  appearance: none; /*Aparência*/
  -webkit-appearence: none; /*De acordo com o CAN I USE há necessidade(favoritos/code)*/
  /*-moz-appearance: none; - = prefixo de um navegador especifico que não aceite o comando acima, como é no caso do mozilla
  -webkit-appearance: none - = prefixo do chrome/safari
  -ms-appearance = microsoft*/
  background-image: url("data:image/svg+xml,%3Csvg width='10' height='6' viewBox='0 0 10 6' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 1L5 5L9 1' stroke='%239C98A6' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E%0A"); /*Está em formato de base 64 = jeito de formatar imagem em formato de texto dentro do código*/
  background-repeat: no-repeat; /*Atenção !!! não há repetição no background*/
  background-position: right 24px top 50%; /*Posicção do background
  24px de espaço a direita
  e fica a 50% da parte cima ou seja centralizado*/
}

.col-3 {
  display: flex;
  gap: 20px;
}

.col-3 > div:nth-child(1) {
  /*> div = primeira nivel de div dentro da col-3 (ATENÇÃO !!! caso houve-se outra div dentro da div class="input-wrapper", esta classe serviria para especificar que só usaria a div input-wrapper)
  a sudclass nth-child = número do filho ou seja da div*/
  width: 100%; /*Faz com que a div contendo a data, ocupe o restante da página que sobra, não sendo distribuido para as outras*/
}

/*.checkbox-wrapper {
}Fica inutilizado pelo display = none*/

.checkbox-wrapper {
  position: relative; /*O posicionamento é relativo em relação ao posicionamento absoluto do input*/
}

.checkbox-wrapper label {
  display: flex;
  align-items: center;
  /*As duas atribuições acima são deslocadas para o label para fazer com que o alinhamento entre "checkbox" feita a partir do figma fique alinhada com o label*/
  margin: 0; /*Tem um margin-bottom em uma atribuição conjunto lá em cima, temos que zerar o margin aqui para conseguir que os itens fiquem alinhados*/

  gap: 16px;
}

.checkbox-wrapper input {
  position: absolute;
  /*display: none; Por padronização do navegador temos que retirar o checkbox, para conseguir introduzir um que consigamos fazer alterações, ele tem que existir*/
  width: 24px;
  height: 24px;

  opacity: 0; /*Ao inves de utilizar o display none, que acarretaria um problema de acessebilidade com a tecla tab, que dificultaria o movimento pela página daqueles que só conseguem utilizar o teclado, fazemos com que o input fique invisivel, sobreposto ao checkbox que criamos a partir do figma por meio do posicionamento absoluto em relação ao relativo*/
}

.checkbox-wrapper label::before {
  /*Introduzir elemento antes do label*/
  content: '';
  width: 24px;
  height: 24px;
  display: block; /*Faz com que a caixa "checkbox" feita apartir do figma apareça, porém desconfigura o alinhamento*/

  border: 1px solid #e6e6f0;
  border-radius: 8px;
}

.checkbox-wrapper input:checked + label::before {
  /*Significa pegar o input dentro do checkbox-wrapper que ao clicar dentro do label::before - que possui um content = conteúdo que é a nossa checkbox feita apartir do figma é atribuir a ela um efeito*/
  background-image: url("data:image/svg+xml,%3Csvg width='18' height='14' viewBox='0 0 18 14' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M6 11.17L1.83 7L0.410004 8.41L6 14L18 2L16.59 0.589996L6 11.17Z' fill='%2342D3FF'/%3E%3C/svg%3E%0A");
  background-repeat: no-repeat;
  background-position: center;
}

.checkbox-wrapper input:focus + label::before {
  /*Quando o input estiver em foco dentro do checkbox-wrapper pego o elemento antes do label que é o checkbox do figma*/
  outline: 2px solid black; /*Cotorno = ou seja quando o input estiver focado faço um contorno nele*/
}

footer {
  background-color: #f0f0f4;

  border-top: 1px solid #d6d6d6;
  border-radius: 0 0 8px 8px;

  margin-bottom: 91px;

  padding: 35px 64px 45px; /*Delimitando o espaço do button sem a necessidade de usar o width = largura, tornando-o mais flexivel*/

  height: 136px;

  display: flex;
  flex-direction: column; /*No caso de usar o padding ao inves de utilizar o width = largura*/
  /*justify-content: center;
  align-items: center;*/
}

footer .button {
  /*width: 608px;*/
  height: 56px;

  background-color: #04d361;
  border-radius: 8px;
  border: none;

  font-family: 'Archivo', sans-serif;
  font-weight: 600;
  font-size: 16px;
  line-height: 26px;
  color: #ffffff;
}

footer .button:hover {
  background-color: #08a04c;
}

input:invalid {
  /*Quando o input for inválido pela sua própia especificação ou pelo required*/
  border: 1px solid #ff1010;
}
